services:
  # Spring Boot Services
  api-gateway-service:
    build:
      context: .
      dockerfile: api-gateway-service/Dockerfile
    restart: always
    ports:
      - "8080:8080"
    environment:
      COLORING_SERVICE_URL: http://solver-service:8082
      AUTHENTICATION_SERVICE_URL: http://authentication-service:8081
      MAP_STORAGE_SERVICE_URL: http://map-storage-service:8083
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      - authentication-service
      - map-storage-service
      - solver-service
      - redis

  authentication-service:
    build:
      context: .
      dockerfile: authentication-service/Dockerfile
    restart: always
    ports:
      - "8081:8081"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: password
      DB_NAME: users
      JWT_SECRET: mySecretKey123456789012345678901234567890
      LOGGER_SERVICE_URL: logger-service:50001
    depends_on:
      - postgres

  map-storage-service:
    build:
      context: .
      dockerfile: map-storage-service/Dockerfile
    restart: always
    ports:
      - "8083:8083"
    environment:
      MONGO_URI: mongodb://admin:password@mongo:27017/?authSource=admin
      MONGO_DB: mapstore
      LOGGER_SERVICE_URL: logger-service:50001
    depends_on:
      - mongo

  logger-service:
    build:
      context: .
      dockerfile: logger-service/Dockerfile
    restart: always
    ports:
      - "8084:8084"
      - "50001:50001"
    environment:
      MONGO_URI: mongodb://admin:password@mongo:27017/?authSource=admin
      MONGO_DB: logs
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    depends_on:
      mongo:
        condition: service_started
      kafka:
        condition: service_healthy

  # Keep the Python solver service as-is
  solver-service:
    build:
      context: .
      dockerfile: solver-service/Dockerfile
    restart: always
    ports:
      - "8082:8082"
    environment:
      LOGGER_SERVICE_URL: logger-service:50001
      PORT: 8082

  # Infrastructure services (updated to latest versions)
  redis:
    image: "redis:8-alpine"
    ports:
      - "6379:6379"
    restart: always
    volumes:
      - ./db-data/redis/:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      - REDIS_PASSWORD=

  mongo:
    image: "mongo:8.0"
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: mapstore
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - ./db-data/mongo/:/data/db

  postgres:
    image: "postgres:17"
    ports:
      - "5432:5432"
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: users
    volumes:
      - ./db-data/postgres/:/var/lib/postgresql/data/

  zookeeper:
    image: "confluentinc/cp-zookeeper:7.7.0"
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - ./db-data/zookeeper/:/var/lib/zookeeper/data
      - ./db-data/zookeeper-logs/:/var/lib/zookeeper/log

  kafka:
    image: "confluentinc/cp-kafka:7.7.0"
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    depends_on:
      - zookeeper
    healthcheck:
      test:
        ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - ./db-data/kafka/:/var/lib/kafka/data
